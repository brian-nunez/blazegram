generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // url                  = "file:./db.sqlite"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    Comment       Comment[]
    Post          Post[]
    sessions      Session[]
    profile       Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Image {
    id          String   @id @default(cuid())
    name        String
    url         String
    description String?
    profileId   String?
    Profile     Profile? @relation(fields: [profileId], references: [id])
}

model Profile {
    id          String  @id @default(cuid())
    name        String
    tag         String?
    description String?
    followers   Int     @default(0)
    following   Int     @default(0)
    images      Image[]
    posts       Post[]
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
    id        String    @id @default(cuid())
    title     String
    content   String
    published Boolean
    authorId  String
    profileId String?
    author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    Profile   Profile?  @relation(fields: [profileId], references: [id])
    comments  Comment[]
    tags      Tag[]
}

model Comment {
    id       String @id @default(cuid())
    text     String
    authorId String
    postId   String
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
    id     String @id @default(cuid())
    name   String
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}
